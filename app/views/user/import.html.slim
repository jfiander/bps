h1 Import user data

p
  b Last import completed:
  = ImportLog.latest&.created_at&.strftime(TimeHelper::MEDIUM_TIME_FORMAT)

hr

#import-info.center
  .center This importer accepts the following fields:
  .table.columns
    .table-row
      .table-cell.birmingham-blue Certificate *
      .table-cell.birmingham-blue First Name *
      .table-cell.birmingham-blue Last Name *
      .table-cell.birmingham-blue E-Mail *
      .table-cell Cert. Date
    .table-row
      .table-cell.red Rank **
      .table-cell.red HQ Rank **
      .table-cell.red SQ Rank **
      .table-cell Grade
      .table-cell Tot.Years
    .table-row
      .table-cell IDEXPR
      .table-cell EdPro
      .table-cell EdAch
      .table-cell MM
      .table-cell Senior
    .table-row
      .table-cell Address 1
      .table-cell Address 2
      .table-cell City
      .table-cell State
      .table-cell Life
    .table-row
      .table-cell Zip Code
      .table-cell Home Phone
      .table-cell Cell Phone
      .table-cell Bus. Phone
      .table-cell Prim.Cert
    .table-row
      .table-cell MMSI
      .table-cell Call Sign
      .table-cell Boat Name
      .table-cell Boat Type
      .table-cell Home Port
    .table-row
      .table-cell Birthday
      .table-cell Spouse
      .table-cell Fax Phone
      .table-cell
      .table-cell

  hr

  .center.birmingham-blue
    | * – Blue fields are not updated if the user already exists.

  hr

  .center.red
    | ** – The imported rank is selected from the first matched field in this order:
  .table.ranks.red
    .table-row
      .table-cell
        | (1) <code>Rank</code>
      .table-cell
        | (2) <code>SQ Rank</code>
      .table-cell
        | (3) <code>HQ Rank</code>

  hr

  .center.red.italic
    | A user's displayed rank will be the highest of the following:
    ul.simple
      li Bridge office rank
      li Manual <code>override_rank</code>
      li Imported rank
      li Committee rank
    | N.B. The Bridge Officers page always displays the relevant bridge office rank.

  hr

  .gray
    .center This importer ignores the following fields:
    .table.columns
      .table-row
        .table-cell DA
        .table-cell H/A
        .table-cell Sex
        .table-cell NN Prf
        .table-cell
      .table-row
        .table-cell Spo Cert.
        .table-cell Spo Sex
        .table-cell Wedding
        .table-cell Nickname
        .table-cell
      .table-row
        .table-cell Seascout
        .table-cell Affiliation
        .table-cell Squadron 1
        .table-cell Squadron 2
        .table-cell
      .table-row
        .table-cell Org.Sqd
        .table-cell Org.Dst
        .table-cell Pre.Sqd
        .table-cell Pre.Dst
        .table-cell
      .table-row
        .table-cell Last BDU
        .table-cell Last HQ
        .table-cell Type / Status Desc.
        .table-cell Type / Status Code
        .table-cell Transfer
      .table-row
        .table-cell Telephone
        .table-cell Fax Phone
        .table-cell < Test
        .table-cell Ext
        .table-cell OK
      .table-row
        .table-cell OAL
        .table-cell Beam
        .table-cell Draft
        .table-cell Power
        .table-cell Fuel Capacity
      .table-row
        .table-cell Speed
        .table-cell Range
        .table-cell Clearance
        .table-cell Berths
        .table-cell
      .table-row
        .table-cell Dist No
        .table-cell Squad No.
        .table-cell Squad. Code
        .table-cell Squad. Name
        .table-cell

  hr

  .center Any additional columns will be interpreted as educational completion dates.
  .center.bold Users who are not included in the import file (except current bridge officers) can be automatically locked.

hr

= form_tag import_path, multipart: true
  = FA::Icon.p('file-csv', style: :duotone, title: 'CSV files only')
  = file_field_tag :import_file, required: true
  br
  p For users not in import file:
  = switch_box(nil, :lock_missing, 'lightblue-red', 'ignore lock-missing')
  br
  = spinner_button button_text: 'Upload', css: 'big'

- if defined?(@import_results)
  p = "Created #{@import_results[:created].count} new #{'user'.pluralize(@import_results[:created].count)}."
  p = "Updated #{@import_results[:updated].count} existing #{'user'.pluralize(@import_results[:updated].count)}."
  p = "Added #{@import_results[:completions].count} completion #{'date'.pluralize(@import_results[:completions].count)}."
  p = "Set #{@import_results[:families].count} new #{'family'.pluralize(@import_results[:families].count)}."
  - unless @import_results[:locked] == :skipped
    p = "Locked #{@import_results[:locked].count} missing #{'user'.pluralize(@import_results[:locked].count)}."

  #import-results
    - if @import_results[:proto].created.any?
      h3 Created
      .table.striped
        .table-row.bold
          .table-cell ID
          .table-cell Certificate
          .table-cell Name
        - @import_results[:proto].created.each do |user|
          .table-row
            .table-cell = user.id
            .table-cell = user.certificate
            .table-cell = user.name

    - if @import_results[:proto].updated.any?
      h3 Updated
      .table.striped
        .table-row.bold
          .table-cell ID
          .table-cell Certificate
          .table-cell Name
          .table-cell Changes
        - @import_results[:proto].updated.each do |user_update|
          .table-row
            .table-cell = user_update.user.id
            .table-cell = user_update.user.certificate
            .table-cell = user_update.user.name
            .table-cell.no-pad
              .table.striped
                .table-row.bold
                  .table-cell Field
                  .table-cell.red From
                  .table-cell.green To
                - user_update.changes.each do |change|
                  .table-row
                    .table-cell = change.field
                    .table-cell.red = change.from
                    .table-cell.green = change.to

    - if @import_results[:proto].completions.any?
      h3 Completions
      .table.striped
        .table-row.bold
          .table-cell ID
          .table-cell Certificate
          .table-cell Name
          .table-cell Completions
        - @import_results[:proto].completions.each do |user_completion|
          .table-row
            .table-cell = user_completion.user.id
            .table-cell = user_completion.user.certificate
            .table-cell = user_completion.user.name
            .table-cell.no-pad
              .table.striped
                .table-row.bold
                  .table-cell Key
                  .table-cell Date
                - user_completion.completions.each do |completion|
                  .table-row
                    .table-cell = completion.key
                    .table-cell = Time.at(completion.date.seconds).strftime(TimeHelper::FULL_DATE)

    - if @import_results[:proto].families.any?
      h3 Families
      .table.striped
        .table-row.bold
          .table-cell ID
          .table-cell Certificate
          .table-cell Name
          .table-cell Family
        - @import_results[:proto].families.each do |user_family|
          .table-row
            .table-cell = user_family.user.id
            .table-cell = user_family.user.certificate
            .table-cell = user_family.user.name
            .table-cell.no-pad
              .table.striped
                .table-row.bold
                  .table-cell ID
                  .table-cell Certificate
                  .table-cell Name
                - user_family.family.each do |f|
                  .table-row
                    .table-cell = f.id
                    .table-cell = f.certificate
                    .table-cell = f.name

    - if @import_results[:proto].locked
      h3 Locked Users
    - else
      h3 Users Not in Import

    .table.striped
        .table-row.bold
          .table-cell ID
          .table-cell Certificate
          .table-cell Name
        - @import_results[:proto].not_in_import.each do |user|
          .table-row
            .table-cell = user.id
            .table-cell = user.certificate
            .table-cell = user.name
hr

p You can also:
p = link_to(automatic_update_path, method: :post, class: 'big') { FA::Icon.p('cloud-download-alt', style: :duotone) + 'Update Automatically from National' }
p = link_to(automatic_update_dryrun_path, method: :post, class: 'big green') { FA::Icon.p('cloud-download-alt', style: :duotone) + 'Dryrun' }
