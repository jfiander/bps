h1 = "#{@edit_mode} #{@event_title}"

= render('application/required_fields')

= form_for(@event, url: @submit_path, multipart: true) do |f|
  = f.hidden_field(:id) if @submit_path.match(%r{/update})

  #new.divided
    #event-general
      h2 General Information

      .left
        span.red = FA::Icon.p('dot-circle', style: :duotone, css: 'red', shrink: 4)
        = f.label :event_type_id, "#{@event_title} type"
      .right
        - if event_type_param == 'course'
          = f.select :event_type_id, grouped_options_for_select(@event_types, @event.event_type_id), prompt: "Please select #{event_type_param == 'event' ? 'an' : 'a'} #{event_type_param} type", required: true
        - else
          = f.select :event_type_id, options_for_select(@event_types, @event.event_type_id), include_blank: true, prompt: "Please select #{event_type_param == 'event' ? 'an' : 'a'} #{event_type_param} type", required: true
        - if current_user&.permitted?(:admin, :education, strict: true)
          ul
            li = link_to(event_types_path, target: :_blank) { FA::Icon.p('edit', style: :duotone) + 'Manage Event Types' }
            li &nbsp;
            li = link_to(refresh_event_types_path(category: event_type_param), remote: true, class: 'green') { FA::Icon.p('sync-alt', style: :duotone) + 'Reload Event Types' }
      br.clear

      - if event_type_param == 'event'
        .left = f.label :summary, 'Event name'
        .right = f.text_field :summary, placeholder: 'optional'
        br.clear

      .left = f.label :slug, 'Short URL'
      .right = f.text_field :slug, placeholder: 'optional'
      br.clear

      .left
        = f.label :location
        ul
          li.red If you need to add a new location, do that before continuing.
          li You can also save now, then add a location here later.
      .right
        - if @locations.present?
          = f.select :location_id, grouped_options_for_select(@locations_grouped, @event.location_id), required: true
        ul
          li = link_to(locations_path, target: :_blank) { FA::Icon.p('edit', style: :duotone) + 'Manage Locations' }
          li &nbsp;
          li = link_to(refresh_locations_path(id: @event&.id), remote: true, class: 'green') { FA::Icon.p('sync-alt', style: :duotone) + 'Reload Locations' }
      br.clear

      - if event_type_param.in? %w[course seminar]
        .left = f.label :show_in_catalog, "Show in #{@event_title} Catalog"
        .right = switch_box(f, :show_in_catalog, 'darkblue-lightblue', 'ignore show')
        br.clear

      - if current_user.authorized_for_activity_feed?
        .left = f.label :activity_feed, "Show in Activity Feed"
        .right = switch_box(f, :activity_feed, 'darkblue-lightblue', 'ignore show')
        br.clear

      .left = f.label :visible
      .right = switch_box(f, :visible, 'red-lightblue', 'yes no')
      br.clear

    #event-schedule
      h2 Schedule

      .left = f.label :online, 'Available Online'
      .right = switch_box(f, :online, 'red-lightblue', 'yes no')
      br.clear

      #online_details class=(@event.online ? '' : 'hide')
        - if current_user.permitted?(:admin)
          .left
            = f.label :conference_id_cache, 'Google Meet ID', class: 'admin'
            ul
              li.red Only edit this if you need to change the stored link.
          .right = f.text_field :conference_id_cache, disabled: !@event.online, class: 'admin'
          br.clear

        .left
          = f.label :link_override
          ul
            li.red Only use this field if you need to change the stored link.
            li This takes highest priority for the link to be displayed.
            li
              ' Include the
              code> http[s]://
              | in this URL.
        .right = f.text_field :link_override, disabled: !@event.online
        br.clear

      .left = f.label :all_day
      .right = switch_box(f, :all_day, 'darkblue-lightblue', 'regular all-day')
      br.clear

      #regular_start_time class=(@event.all_day ? 'hide' : '')
        .left
          span.red = FA::Icon.p('dot-circle', style: :duotone, css: 'red', shrink: 4)
          = f.label :start_at
        .right = f.datetime_field :start_at, required: !@event.all_day, disabled: @event.all_day, type: 'datetime-local', min: (Date.today.beginning_of_year + 1.minute unless @event.start_at.present?), value: (@event.start_at || Date.today.beginning_of_year).strftime(TimeHelper::ISO_TIME_FORMAT)
        br.clear

        .left = f.label :length_h, 'Session length'
        .right
          = f.select :length_h, options_for_select((0..12), @event.length_h || 2), disabled: @event.all_day
          = f.select :length_m, options_for_select(%w[00 15 30 45], @event.length_m || '00'), disabled: @event.all_day
        br.clear

        .left = f.label :sessions, 'Number of sessions'
        .right = f.number_field :sessions, class: 'number', min: 1, max: 100, placeholder: '1', disabled: @event.all_day
        br.clear

        .left = f.label :repeat_pattern, 'Repeat'
        .right = f.select :repeat_pattern, options_for_select([['Every week', 'WEEKLY'], ['Consecutive days', 'DAILY']], @event.repeat_pattern), disabled: @event.all_day
        br.clear

      #all_day_start_time class=(@event.all_day ? '' : 'hide')
        .left
          span.red = FA::Icon.p('dot-circle', style: :duotone, css: 'red', shrink: 4)
          = f.label :start_at
        .right = f.date_field :start_at, required: @event.all_day, disabled: !@event.all_day
        br.clear

        .left = f.label :sessions, 'Number of days'
        .right = f.number_field :sessions, class: 'number', min: 1, max: 100, disabled: !@event.all_day
        br.clear

    #event-registrations
      h2 Registrations

      .left = f.label :cost, 'Regular cost'
      .right
        = FA::Icon.p('dollar-sign', style: :duotone)
        = f.number_field :cost, class: 'number', min: 0, placeholder: '0.00'
      br.clear

      .left
        = f.label :member_cost, 'BPS member cost'
        ul.red
          li Only enter if applicable.
      .right
        = FA::Icon.p('dollar-sign', style: :duotone)
        = f.number_field :member_cost, class: 'number', min: 0, placeholder: '0.00'
      br.clear

      .left
        = f.label :usps_cost, 'USPS member cost'
        ul
          li This will automatically add a note to the end of the description.
          li.red
            | Must be
            u<> between
            | the two above costs.
          li.red Only enter if applicable.
      .right
        = FA::Icon.p('dollar-sign', style: :duotone)
        = f.number_field :usps_cost, class: 'number', min: 0, placeholder: '0.00'
      br.clear

      .left = f.label :allow_member_registrations, 'Member registrations'
      .right = switch_box(f, :allow_member_registrations, 'red-lightblue', 'deny allow')
      br.clear

      .left = f.label :allow_public_registrations, 'Public registrations'
      .right = switch_box(f, :allow_public_registrations, 'red-lightblue', 'deny allow')
      br.clear

      .left = f.label :registration_limit, 'Registrations limit'
      .right = f.number_field :registration_limit, class: 'number', min: 0, placeholder: 'no limit'
      br.clear

      .left
        = f.label :advance_payment, 'Require advance payment'
        ul
          li Payment will be required before the registration cutoff.
          li.red Late payments will not be processed.
      .right = switch_box(f, :advance_payment, 'lightblue-red', 'no yes')
      br.clear

      .left
        = label_tag :notifications, 'Committee Notifications'
        ul
          li Put each committee on a separate line.
          li This will automatically include the appropriate department head(s).
          li.red These apply to all events of this type.
      .right = text_area_tag :notifications, @notifications, class: 'bulletted'
      .br.clear

      .left
        = f.label :cutoff_at, 'Do not allow registrations after', class: 'red'
        ul
          li Defaults to start time.
          li.red Updates automatically if start time changes, unless this is also changed.
      .right = f.datetime_field :cutoff_at
      br.clear

      .left
        = f.label :expires_at, "Do not display this #{event_type_param} after", class: 'red'
        ul
          li Defaults to one week after start time.
          li.red Updates automatically if start time changes, unless this is also changed.
      .right = f.datetime_field :expires_at
      br.clear

    #event-details
      h2 Details

      .left = f.label :description
      .right = f.text_area :description
      br.clear

      - if event_type_param.in? %w[course seminar]
        .left
          = f.label :requirements, 'Student requirements'
          ul
            li Put each requirement on a separate line.
            li &nbsp;
            li.italic e.g. A computer to run navigation software; a calculator; etc.
        .right = f.text_area :requirements, class: 'bulletted'
        br.clear

        .left
          = label_tag :topics, 'Course topics'
          ul: li Put each topic on a separate line.
        .right = text_area_tag :topics, @course_topics, class: 'bulletted'
        br.clear

        .left
          = label_tag :includes, 'Course materials'
          ul: li Put each item on a separate line.
        .right = text_area_tag :includes, @course_includes, class: 'bulletted'
        br.clear

        - if event_type_param == 'course'
          .left = f.label :prereq_id, 'Prerequisite course'
          .right = f.select :prereq_id, grouped_options_for_select(@event_types, @event.prereq_id), prompt: 'Please select a prerequisite course, if applicable'
        br.clear

      .left
        = f.label :flyer
        ul
          li Courses and seminars default to showing their book cover.
          li &nbsp;
          li An image will display a thumbnail next to the description.
          li A PDF will display in a box under all other information.
      .right
        = FA::Icon.p('file-pdf', style: :duotone, css: 'file-type')
        = FA::Icon.p('file-image', style: :duotone, css: 'file-type')
        = f.file_field :flyer, id: 'event_flyer_file'
        - if @event.flyer.present?
          br
          - if @event.pick_flyer&.downcase&.match(/\.pdf/)
            iframe src=(@event.pick_flyer) width='200'
          - elsif @event.pick_flyer&.downcase&.match(/\.(jpe?g|png)$/)
            = image_tag @event.pick_flyer, width: 100
          p Remove flyer: #{f.check_box(:delete_attachment, id: 'event_flyer_remove')}
      br.clear

      - if event_type_param.in? %w[course seminar]
        .left
          = label_tag :instructors, 'Instructor(s)'
          ul
            li Put each instructor on a separate line.
            li &nbsp;
            li Enter the full name of each instructor without rank or grade.
            li You can also put a slash followed by their certificate number.
            li.red Invalid instructors will not be saved.
        .right
          #api-auth-id.hide = current_user.ensure_api_key
          #api-auth-token.hide = current_user.create_token.new_token
          = text_area_tag :instructors, @instructors, class: 'bulletted'
          #instructors-validation
        br.clear

    .center = spinner_button(f, button_text: "#{@edit_mode} #{@event_title}", disable_text: "#{@edit_mode.sub(/e$/, '')}ing #{@event_title}", css: 'big')
