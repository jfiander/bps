h1#profile-title = t('grant_permission')

/ Add a new role assignment
#add-permissions
  = form_tag permit_path, id: "add-permission", name: "add-permission"
    = select_tag "user_id", options_for_select(@users), class: "add-permission", include_blank: true, required: true, prompt: "Please select a user"
    = select_tag "role", options_for_select(@roles.sort), class: "add-permission", include_blank: true, required: true, prompt: "Please select a permission"
    br
    .spacer
    = submit_tag "Grant permission", {class: "invite-button big"}

.spacer

h1#profile-title Current Permissions

p Note: Bridge officers and committee chairs are automatically granted relevant permissions #{link_to('ex officio', auto_permissions_path)}.

#permissions.table
  .table-row.header
    .table-cell User
    .table-cell Permission
    .table-cell
  - UserRole.all.order(:user_id).includes(:user, :role).each do |p|
    - next if p.role.name.in?(%w[admin users]) && !current_user.permitted?(:admin, strict: true)
    .table-row
      td class=(p.role.name == 'admin' ? 'gray' : '') = display_name = p.user.full_name || p.user.email
      td class=(p.role.name == 'admin' ? 'gray' : '') = p.role.name
      td = link_to(remove_permit_path(permit_id: p.id), method: :delete, class: "red", data: { confirm: "Are you sure you want to remove the #{p.role.name} permission from #{display_name}?" }) { FA::Icon.p('minus-square', style: :duotone) } if current_user.permitted?(:users) && p.role.name != "admin"
